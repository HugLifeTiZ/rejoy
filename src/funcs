#!/bin/bash
# ReJoy helper functions.

# Default values.
resort_js=1
resort_event=1
use_dummy=1
dummy_device=$(find /dev/input/by-path -type l | egrep -v 'kbd|mouse' | head -1)

# Utility functions.
is () { [[ ${1,,} =~ yes|on|true|enabled || $1 -gt 0 ]]; }
udevprop () { udevadm info -n $1 2> /dev/null | grep "E: $2=" | cut -f2 -d=; }
is_joystick () { [[ "$(udevprop $1 ID_INPUT_JOYSTICK)" ]]; }
is_virtual () { [[ "$(udevprop $1 DEVPATH)" == *virtual* ]]; }
dev_name () {
    d="$(readlink -f $1)"; echo "$(basename $d): $(udevprop_walk $d product)";
}
reply () {
    {
        echo "result=$1"
        shift
        echo "output=\"$*\""
    } > /run/rejoy/control
}

# Gets the first non-null occurrence of desired property in the hierarchy.
udevprop_walk () {
    udevadm info -a -n $1 2> /dev/null | sed -nr \
     -e "s:^.*ATTRS\\{$2\\}==\"(.+)\".*$:\\1:p" \
     -e "s:^.*$2==\"(.+)\".*$:\\1:p" | head -1
}

# Adapted from joystickguid.rb by taktaktaktaktaktaktaktaktaktak
dev_guid () { ruby -- - $1 <<EOF
    EVIOCGID = 0x80084502; input = [0,0,0,0].pack('SSSS'); success = 0
    File.open(ARGV[0], File::RDONLY|File::NONBLOCK) { |file|
        success = file.ioctl(EVIOCGID, input) }
    bustype, vendor, product, version = input.unpack('SSSS')
    if(0 == success && 0 != vendor && 0 != product && 0 != version) then
        puts format('%02x%02x0000%02x%02x0000%02x%02x0000%02x%02x0000',
         bustype & 0xFF, bustype >> 8, vendor & 0xFF, vendor >> 8,
         product & 0xFF, product >> 8, version & 0xFF, version >> 8);
    end
EOF
}

dev_events () {
    local tmp=$(mktemp -t rejoy.XXXXXX);
    evtest $1 &> "$tmp" &
    sleep 0.1; kill $!
    for e in $(sed -nr 's:^.*nt code ([0-9]+).*$:\1:p' "$tmp"); do
        printf '%03d ' $((10#$e))
    done; echo; rm "$tmp"
}

ev_for () {
    { for e in $(sed -nr 's:^.*_#([0-9]+)\s+=\s+.*'"$1"'\s*$:\1:pi' "$2"); do
        printf '%03d ' $((10#$e))
    done; echo; } | sed -r 's/\s+$//' | sed -r 's/\s+/\|/g'
}

map_events () {
    declare -Ag map
    map[a]=$(ev_for a "$1"); map[b]=$(ev_for b "$1")
    map[x]=$(ev_for a "$1"); map[y]=$(ev_for y "$1")
    map[lb]=$(ev_for lb "$1"); map[rb]=$(ev_for rb "$1")
    map[lt]=$(ev_for lt "$1"); map[rt]=$(ev_for rt "$1")
    map[tl]=$(ev_for tl "$1"); map[tr]=$(ev_for tr "$1")
    map[start]=$(ev_for start "$1"); map[back]=$(ev_for back "$1")
    map[guide]=$(ev_for guide "$1")
    map[x1]=$(ev_for x1 "$1"); map[y1]=$(ev_for y1 "$1")
    map[x2]=$(ev_for x2 "$1"); map[y2]=$(ev_for y2 "$1")
    map[dpad_x]=$(ev_for dpad_x "$1"); map[dpad_y]=$(ev_for dpad_y "$1")
    map[du]=$(ev_for du "$1"); map[dd]=$(ev_for dd "$1")
    map[dl]=$(ev_for dl "$1"); map[dr]=$(ev_for dr "$1")
}

is_match () {
    for e in a b x y lb rb lt rt tl tr start back guide x1 y1 x2 y2; do
        [[ "$dev_evs" =~ ${map[$e]} ]] || return 1; done
    [[ "$dev_evs" =~ ${map[dpad_x]} ]] && \
     [[ "$dev_evs" =~ ${map[dpad_y]} ]] && \
     return 0
    [[ "$dev_evs" =~ ${map[du]} ]] && [[ "$dev_evs" =~ ${map[dd]} ]] && \
     [[ "$dev_evs" =~ ${map[dl]} ]] && [[ "$dev_evs" =~ ${map[dr]} ]] && \
     return 0
    return 1
}

find_map_match () {
    dev_evs=$(dev_events "$1")
    for cfg in $(find "$rejoy_path/maps/" -name "${drv}_*.cfg") \
     $(find "/etc/rejoy/maps/" -type f -name "${drv}_*.cfg"); do
        map_events "$cfg"
        if is_match; then echo "$cfg"; break; fi
    done
    unset map dev_evs
}

get_map () {
    local guid="$(dev_guid $1)"
    # Check user maps
    if [[ -f "/etc/rejoy/maps/$guid.cfg" ]]; then
        echo "/etc/rejoy/maps/$guid.cfg"; return
    # Check included maps
    elif [[ -f "$rejoy_path/maps/$guid.cfg" ]]; then
        echo "$rejoy_path/maps/$guid.cfg"; return
    fi
    # Find a preset.
    drv="$(udevprop_walk $1 DRIVERS)"
    if [[ "$drv" == "xpad" ]]; then
        ln -s "$rejoy_path/maps/xpad_all.cfg" "/etc/rejoy/maps/$guid.cfg"
        echo "/etc/rejoy/maps/$guid.cfg"; return
    fi
    local map=$(readlink -f "$(find_map_match $1)")
    if [[ "$map" ]]; then
        ln -s "$map" "/etc/rejoy/maps/$guid.cfg"
        echo "/etc/rejoy/maps/$guid.cfg"
    else
        # TODO: Map generation program.
        echo "$rejoy_path/maps/template.cfg"
    fi
}

init_rejoyd () {
    mv /var/log/rejoy /var/log/rejoy-last &> /dev/null
    exec &> /var/log/rejoy
    echo "Initializing rejoyd."
    mkdir -p /run/rejoy/joys /dev/input/rejoy
    touch /run/rejoy/control
    chmod a+rwx /run/rejoy
    chmod a+rw /run/rejoy/control
    [[ -d /run/rejoy/opts ]] && rm -r /run/rejoy/opts
    cp -r "/etc/rejoy/opts" /run/rejoy/opts
    [[ -e /etc/rejoy/conf ]] && . /etc/rejoy/conf
    [[ -x "$xboxdrv_bin" ]] || xboxdrv_bin=$(which xboxdrv)
    add_joysticks
}

end_rejoyd () {
    echo "Terminating rejoyd."
    for dev in /run/rejoy/joys/*; do
        echo "Restoring $(dev_name $dev/device)"
        if [[ -f "$dev/pid" ]]; then
            kill $(<$dev/pid)
            wait $(<$dev/pid)
        fi
        mv $(readlink -f $dev/device) /dev/input
    done
    kill_dummy
    clean_dead_devices
    reply 0 "RejoyD shut down."
    rm -rf /run/rejoy
    exit 0
}

add_joysticks () {
    kill_dummy
    for dev in /dev/input/event*; do
        if is_joystick $dev && ! is_virtual $dev; then
            echo "Adding $(dev_name $dev)"
            dev="$(basename $dev)"
            mkdir -p /dev/input/rejoy /run/rejoy/joys/$dev
            mv /dev/input/$dev /dev/input/rejoy
            ln -s /dev/input/rejoy/$dev /run/rejoy/joys/$dev/device
            start_xbd $dev
        fi
    done
    start_dummy
    resort_devices
    reply 0
}

rm_joysticks () {
    kill_dummy
    for dev in /dev/input/rejoy/event*; do
        if [[ ! "$(udevadm info -n $dev 2> /dev/null)" ]]; then
            echo "$(basename $dev) has been unplugged; shutting down xboxdrv."
            dev="$(basename $dev)"
            kill -9 $(</run/rejoy/joys/$dev/pid)
            wait $(</run/rejoy/joys/$dev/pid)
            rm $(readlink -f /run/rejoy/joys/$dev/device)
            rm -r /run/rejoy/joys/$dev
        fi
    done
    clean_dead_devices
    start_dummy
    resort_devices
    reply 0
}

set_defaults () {
    mkdir -p /etc/rejoy/opts
    for opt in "$@"; do
        echo "Setting default option: $opt"
        val="$(echo $opt | cut -f2 -d=)"; opt="$(echo $opt | cut -f1 -d=)"
        if is $val && [[ -f "$rejoy_path/opts/$opt.cfg" ]]; then
            ln -sf "$rejoy_path/opts/$opt.cfg" /etc/rejoy/opts/
        else rm "/etc/rejoy/opts/$opt.cfg" &> /dev/null; fi
    done
    reply 0
}

set_options () {
    for opt in "$@"; do
        echo "Setting current option: $opt"
        val="$(echo $opt | cut -f2 -d=)"; opt="$(echo $opt | cut -f1 -d=)"
        if is $val && [[ -f "$rejoy_path/opts/$opt.cfg" ]]; then
            ln -sf "$rejoy_path/opts/$opt.cfg" /run/rejoy/opts/
        else rm "/run/rejoy/opts/$opt.cfg" &> /dev/null; fi
    done
    reload_xbd
    reply 0
}

reset_options () {
    echo "Resetting options to default."
    [[ -d /run/rejoy/opts ]] && rm -r /run/rejoy/opts
    cp -r "/etc/rejoy/opts" /run/rejoy/opts
    reload_xbd
    reply 0
}

reload_xbd () {
    echo "Restarting xboxdrv for all controllers."
    for dev in /run/rejoy/joys/event*; do
        echo "Stopping xboxdrv for $(dev_name $dev/device)"
        kill $(<"$dev/pid")
        wait $(<"$dev/pid")
    done
    kill_dummy
    clean_dead_devices
    for dev in /run/rejoy/joys/event*; do start_xbd $(basename $dev); done
    start_dummy
    resort_devices
}

start_xbd () {
    local cmd=("$xboxdrv_bin" --silent --quiet --evdev "/dev/input/rejoy/$1")
    cmd+=(--config "$(get_map /dev/input/rejoy/$1)")
    for opt in /run/rejoy/opts/*; do cmd+=(--config "$opt"); done
    echo "Starting xboxdrv for $(dev_name /dev/input/rejoy/$1) - ${cmd[@]}"
    "${cmd[@]}" &
    echo $! > /run/rejoy/joys/$1/pid
    inotifywait -qq -e create /dev/input; sleep 0.1
}

# The main purpose of the dummy device is to stop troublesome programs like Wine
# from moving around our js devices. I have no idea how it even does it, or why
# this works, but if a dummy device exists, Wine won't touch the ordering of the
# other devices. The device cannot be read from at all.
start_dummy () {
    is $use_dummy || return 0
    echo "Starting dummy device."
    local before=$(ls /dev/input | egrep 'event|js')
    "$xboxdrv_bin" --silent --quiet --evdev "$dummy_device" &
    echo $! > /run/rejoy/dummy_pid
    inotifywait -qq -e create /dev/input; sleep 0.1
    # Find devices created since the dummy was started and silence them.
    for d in $(egrep -v -f <(for a in $before; do echo \\b$a\\b; done) \
     <(for a in $(ls /dev/input | egrep 'event|js'); do echo $a; done)); do
        setfacl -b -m u::0,g::0,o::0 /dev/input/$d; done
}

kill_dummy () {
    { is $use_dummy && [[ -e /run/rejoy/dummy_pid ]]; } || return 0
    echo "Killing dummy device."
    kill $(</run/rejoy/dummy_pid)
}

# Sometimes dead devices get left behind. This cleans them up.
clean_dead_devices () {
    sleep 0.25
    echo "Cleaning dead devices."
    for dev in /dev/input/js* /dev/input/event*; do
        if [[ -z "$(udevadm info -n $dev 2> /dev/null)" ]]; then
            echo "$(basename $dev) seems to be dead; removing."
            rm $dev
        fi
    done
}

resort_devices () {
    is $resort_sleep && sleep 0.25
    case $resort_event in
        1|soft) resort_virt_soft ;;
        2|hard) resort_virt_hard ;;
    esac
    is $resort_js && resort_jsdevs
}

# This function moves virtual event devices into the event slots of the
# joysticks that they are using. It does not touch non-virtual devices at all!
# Resorting non-virtual devices causes weird shit to happen.
resort_virt_soft () {
    echo "Resorting virtual event devices."
    local virts=()
    local devs=()
    for dev in /dev/input/event*; do if is_virtual $dev; then
        virts+=("$(basename $dev)")
    fi; done
    for dev in /dev/input/rejoy/event*; do devs+=("$(basename $dev)"); done
    for virt in ${virts[@]}; do
        echo "Resorting virt $virt"
        for dev in ${devs[@]}; do
            if [[ ! -e /dev/input/$dev ]]; then
                echo "Slot $dev vacant; moving $virt there."
                mv /dev/input/$virt /dev/input/$dev
                break
            fi
        done
    done
}

# Set resort_event to 2 to use this mode. It works just like the js mode.
# Gaps in the event numbers will cause issues with some software. UNITY.
resort_virt_hard () {
    echo "Resorting virtual event devices."
    cd /dev/input
    local virts=()
    local devs=()
    for dev in /dev/input/event*; do if is_virtual $dev; then
        virts+=("$(basename $dev)")
    fi; done
    for dev in /dev/input/rejoy/event*; do devs+=("$(basename $dev)"); done
    for virt in ${virts[@]}; do
        echo "Resorting virt $virt"
        local num="$(echo "$virt" | egrep -o '[0-9]+$')"
        local targ=""
        while [[ "$num" -gt 0 ]]; do
            ((num -= 1))
            if [[ ! -e "event$num" ]]; then
                targ="$num"
            fi
        done
        if [[ "$targ" ]]; then
            echo "Moving $virt to event$targ."
            mv "$virt" "event$targ"
        fi
    done
    cd - &> /dev/null
}

# This function just makes sure all js devices start from 0.
resort_jsdevs () {
    echo "Resorting js devices."
    cd /dev/input
    for d in js*; do
        local num="$(echo "$d" | egrep -o '[0-9]+$')"
        local targ=""
        while [[ "$num" -gt 0 ]]; do
            ((num -= 1))
            if [[ ! -e "js$num" ]]; then
                targ="$num"
            fi
        done
        if [[ "$targ" ]]; then
            echo "Moving $d to js$targ."
            mv "$d" "js$targ"
        fi
    done
    cd - &> /dev/null
}
