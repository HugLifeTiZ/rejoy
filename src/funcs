#!/bin/bash
# ReJoy helper functions.

# Default values.
resort_js=1
resort_event=1

# Utility functions.
is () { [[ ${1,,} =~ yes|on|true|enabled || $1 -gt 0 ]]; }
udevprop () { udevadm info -n $1 2> /dev/null | grep "E: $2=" | cut -f2 -d= ; }
is_joystick () { [[ "$(udevprop $1 ID_INPUT_JOYSTICK)" ]] ; }
is_virtual () { [[ "$(udevprop $1 DEVPATH)" == *virtual* ]] ; }
dev_name () { 
    d="$(readlink -f $1)" ; echo "$(basename $d): $(udevprop $d ID_MODEL)" ; }

get_map () {
    local uuid="$(udevprop $1 ID_VENDOR_ID)$(udevprop $1 ID_MODEL_ID)"
    # Check included maps
    if [[ -f "$rejoy_path/maps/$uuid.cfg" ]]; then
        echo "$rejoy_path/maps/$uuid.cfg"
    # Check user maps
    elif [[ -f "/etc/rejoy/maps/$uuid.cfg" ]]; then
        echo "/etc/rejoy/maps/$uuid.cfg"
    # Create a new user map
    else
        # TODO: Map generation program.
        echo "$rejoy_path/maps/template.cfg"
    fi
}

init_rejoyd () {
    mv /var/log/rejoy /var/log/rejoy/last &> /dev/null
    exec &> /var/log/rejoy
    echo "Initializing rejoyd."
    mkdir -p /run/rejoy/joys /dev/input/rejoy
    mkfifo -m 666 /run/rejoy/control
    [[ -d /run/rejoy/opts ]] && rm -r /run/rejoy/opts
    cp -r "/etc/rejoy/opts" /run/rejoy/opts
    add_joysticks
}

end_rejoyd () {
    echo "Terminating rejoyd."
    for dev in /run/rejoy/joys/*; do
        echo "Restoring $(dev_name $dev/device)"
        if [[ -f "$dev/pid" ]]; then
            kill $(<$dev/pid)
            wait $(<$dev/pid)
        fi
        mv $(readlink -f $dev/device) /dev/input
    done
    clean_dead_devices
    rm -rf /run/rejoy
    exit 0
}

add_joysticks () {
    for dev in /dev/input/event*; do
        if is_joystick $dev && ! is_virtual $dev; then
            echo "Adding $(dev_name $dev)"
            dev="$(basename $dev)"
            mkdir -p /dev/input/rejoy /run/rejoy/joys/$dev
            mv /dev/input/$dev /dev/input/rejoy
            ln -s /dev/input/rejoy/$dev /run/rejoy/joys/$dev/device
            start_xbd $dev
        fi
    done
    resort_devices
}

rm_joysticks () {
    for dev in /dev/input/rejoy/event*; do
        if [[ ! "$(udevadm info -n $dev 2> /dev/null)" ]]; then
            echo "$(basename $dev) has been unplugged; shutting down xboxdrv."
            dev="$(basename $dev)"
            kill -9 $(</run/rejoy/joys/$dev/pid)
            wait $(</run/rejoy/joys/$dev/pid)
            rm $(readlink -f /run/rejoy/joys/$dev/device)
            rm -r /run/rejoy/joys/$dev
        fi
    done
    clean_dead_devices
}

set_defaults () {
    mkdir -p /etc/rejoy/opts
    for opt in "$@"; do
        echo "Setting default option: $opt"
        val="$(echo $opt | cut -f2 -d=)"; opt="$(echo $opt | cut -f1 -d=)"
        if is $val && [[ -f "$rejoy_path/opts/$opt.cfg" ]]; then
            ln -sf "$rejoy_path/opts/$opt.cfg" /etc/rejoy/opts/
        else rm "/etc/rejoy/opts/$opt.cfg" &> /dev/null; fi
    done
}

set_options () {
    for opt in "$@"; do
        echo "Setting current option: $opt"
        val="$(echo $opt | cut -f2 -d=)"; opt="$(echo $opt | cut -f1 -d=)"
        if is $val && [[ -f "$rejoy_path/opts/$opt.cfg" ]]; then
            ln -sf "$rejoy_path/opts/$opt.cfg" /run/rejoy/opts/
        else rm "/run/rejoy/opts/$opt.cfg" &> /dev/null; fi
    done
    reload_xbd
}

reset_options () {
    echo "Resetting options to default."
    [[ -d /run/rejoy/opts ]] && rm -r /run/rejoy/opts
    cp -r "/etc/rejoy/opts" /run/rejoy/opts
    reload_xbd
}

reload_xbd () {
    echo "Restarting xboxdrv for all controllers."
    for dev in /run/rejoy/joys/event*; do
        echo "Stopping xboxdrv for $(dev_name $dev/device)"
        kill $(<"$dev/pid")
        wait $(<"$dev/pid")
    done
    clean_dead_devices
    for dev in /run/rejoy/joys/event*; do start_xbd $(basename $dev); done
    resort_devices
}

start_xbd () {
    local cmd=(xboxdrv --silent --quiet --evdev "/dev/input/rejoy/$1")
    cmd+=(--config "$(get_map /dev/input/rejoy/$1)")
    for opt in /run/rejoy/opts/*; do cmd+=(--config "$opt"); done
    echo "Starting xboxdrv for $(dev_name $1) - ${cmd[@]}"
    "${cmd[@]}" &
    echo $! > /run/rejoy/joys/$1/pid
}

# Sometimes dead devices get left behind. This cleans them up.
clean_dead_devices () {
    sleep 0.25
    echo "Cleaning dead devices."
    for dev in /dev/input/js* /dev/input/event*; do
        if [[ -z "$(udevadm info -n $dev 2> /dev/null)" ]]; then
            echo "$(basename $dev) seems to be dead; removing."
            rm $dev
        fi
    done
}

resort_devices () {
    sleep 0.25
    resort_virt_event
    resort_js
}

# This function moves virtual event devices into the event slots of the
# joysticks that they are using. It does not touch non-virtual devices at all!
# Resorting non-virtual devices causes weird shit to happen.
resort_virt_event () {
    echo "Resorting virtual event devices."
    local virts=()
    local devs=()
    for dev in /dev/input/event*; do if is_virtual $dev; then
        virts+=("$(basename $dev)")
    fi; done
    for dev in /dev/input/rejoy/event*; do devs+=("$(basename $dev)"); done
    for virt in ${virts[@]}; do
        echo "Resorting virt $virt"
        for dev in ${devs[@]}; do
            if [[ ! -e /dev/input/$dev ]]; then
                echo "Slot $dev vacant; moving $virt there."
                mv /dev/input/$virt /dev/input/$dev
                break
            fi
        done
    done
}

# This function just makes sure all js devices start from 0.
resort_js () {
    echo "Resorting js devices."
    cd /dev/input
    for d in js*; do
        local num="$(echo "$d" | egrep -o '[0-9]+$')"
        local targ=""
        while [[ "$num" -gt 0 ]]; do
            ((num -= 1))
            if [[ ! -e "js$num" ]]; then
                targ="$num"
            fi
        done
        if [[ "$targ" ]]; then
            echo "Moving $d to js$targ."
            mv "$d" "js$targ"
        fi
    done
    cd - &> /dev/null
}
